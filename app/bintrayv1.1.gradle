apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

version = libraryVersion
group = publishedGroupId                               // Maven Group ID for the artifact


ext {
    if (project.rootProject.file('secret.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('secret.properties').newDataInputStream())
        userName = properties.getProperty("bintray.user")
        apiKey = properties.getProperty("bintray.apikey")
        filePresent = true
    } else {
        filePresent = false
    }
}

// Bintray
bintray {
    if (filePresent) {
        user = userName
        key = apiKey
    } else {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
    }
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
        }
    }
    configurations = ['archives']
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

//task findConventions << {
//    println project.getConvention()
//}

//def pomConfig = {
//    licenses {
//        license {
//            name licenseName
//            url licenseUrl
//            distribution siteUrl
//        }
//    }
//    developers {
//        developer {
//            id developerId
//            name developerName
//            email developerEmail
//        }
//    }
//
//    scm {
//        url gitUrl
//    }
//}
//
//publishing {
//    publications {
//        MultiConfigPublication(MavenPublication) {
//            // Define this explicitly if using implementation or api configurations
//            artifact sourcesJar
//            artifact javadocJar
//            groupId publishedGroupId
//            artifactId artifact
//            version libraryVersion
//            pom.withXml {
//                def root = asNode()
//                def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')
//                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
//                configurations.implementation.allDependencies.each {
//                    // Ensure dependencies such as fileTree are not included.
//                    if (it.name != 'unspecified' && it.version != null) {
//                        def dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', it.group)
//                        dependencyNode.appendNode('artifactId', it.name)
//                        dependencyNode.appendNode('version', it.version)
//                    }
//                }
//                root.children().last() + pomConfig
//            }
//        }
//    }
//}
//
//
//
//task wrapper(type: Wrapper) {
//    gradleVersion = '2.4'
//}