apply plugin: 'org.jetbrains.kotlin.multiplatform'
repositories {
    mavenLocal()
    google()
    jcenter()
    mavenCentral()
}
apply plugin: 'com.android.library'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

ext {
    bintrayRepo = "multi-config"
    bintrayName = "com.juliuscanute.multiconfig"
    libraryName = "multiconfig"

    publishedGroupId = "com.juliuscanute.multiconfig"
    artifact = "multiconfig"
    libraryVersion = "${System.getenv('LIB_VERSION')?:'1.0.51'}"

    libraryDescription = "A library to change Application Config at Runtime"
    siteUrl = "https://github.com/juliuscanute/multi-config"
    gitUrl = "https://github.com/juliuscanute/multi-config"
    developerId = "juliuscanute"
    developerName = "Julius Canute"
    developerEmail = "juliuscanute@gmail.com"
    licenseName = "The Apache Software License, Version 2.0"
    licenseUrl = "https://www.apache.org/licenses/LICENSE-2.0"
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName libraryVersion
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'consumer-rules.pro'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    testImplementation 'junit:junit:4.13'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'com.github.javafaker:javafaker:0.16'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'com.github.javafaker:javafaker:0.16'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation "org.koin:koin-test:$koin_version"
}
def libraryNameIOS = "MultiConfigCommon"
kotlin {
    android("android")
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device

    if (System.getenv("SDK_NAME")?.startsWith("iphoneos")) {
        iosArm64("ios") {
            binaries {
                framework{
                    baseName = libraryNameIOS
                }
            }
        }
    } else{
        iosX64("ios") {
            binaries {
                framework{
                    baseName = libraryNameIOS
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
        }
        iosTest {
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include "${libraryNameIOS}.framework/**"
            include "${libraryNameIOS}.framework.dSYM"
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = '1.8'
    }
}


apply from: 'bintrayv1.1.gradle'